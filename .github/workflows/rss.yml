name: Test PRN Company Resolver

on:
  workflow_dispatch:
    inputs:
      extra_headlines:
        description: 'Optional | Comma-separated headlines to test in addition to defaults'
        required: false
        default: ''

concurrency:
  group: test-company-resolver
  cancel-in-progress: false

jobs:
  test_lookup:
    runs-on: ubuntu-latest

    steps:
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y jq curl coreutils

      # Use the same cache location/file as your main workflow
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: .cache
          key: rss-cache-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            rss-cache-${{ runner.os }}-

      - name: Ensure inventory exists
        run: |
          mkdir -p .cache
          [ -f .cache/company_index.json ] || echo '{}' > .cache/company_index.json

      - name: Run resolver on sample headlines
        env:
          EXTRA: ${{ github.event.inputs.extra_headlines }}
        run: |
          set -euo pipefail

          # ---- Config (same as main workflow) ----
          NEG_TTL_DAYS=30
          NEG_TTL_SEC=$((NEG_TTL_DAYS * 24 * 3600))
          YF_UA='Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36'
          YF_LANG='en-US,en;q=0.9'

          # ---- Helpers (same logic as main) ----
          norm_company_name() {
            echo "$1" \
              | sed 's/[™®©]//g' \
              | sed 's/[“”"'\''()]//g' \
              | sed 's/&/ and /g' \
              | sed -E 's/\b(Inc|Incorporated|Corp|Corporation|Co|Company|Ltd|Limited|PLC|Group|Holdings?|LLC|LP|AG|S\.?A\.?)\b\.?,?//Ig' \
              | sed -E 's/ +/ /g; s/^ +| +$//g' \
              | tr '[:upper:]' '[:lower:]'
          }

          extract_company_from_title() {
            local t="$1"
            local pre first cleaned
            pre=$(echo "$t" | sed -E 's/ — / - /g' | awk -F' - |:|\\|\\|' '{print $1}')
            [ -z "$pre" ] && pre="$t"
            pre=$(echo "$pre" | tr -s ' ')
            first=$(echo "$pre" | awk '{print $1}')
            if echo "$first" | grep -qE '^[A-Z0-9\-]{2,}$'; then echo "$first"; return 0; fi
            local VERBS='launches|announces|reports|unveils|introduces|reveals|confirms|completes|signs|wins|awarded|enters|partners|acquires|files|prices|lists|successfully|passes|secures|appoints|names|extends|expands'
            cleaned=$(echo "$pre" | awk -v verbs="$VERBS" '{
              if (NF>=2) {
                second=$2
                cmd="echo \"" second "\" | tr \"[:upper:]\" \"[:lower:]\""
                cmd | getline second_lc; close(cmd)
                if (second_lc ~ "^(" verbs ")$") { $2=""; sub(/^  +/,""); gsub(/  +/," "); }
              } print }')
            local GENERIC_NOUNS='inverters|series|platform|solution|solutions|product|products|system|systems|software|hardware|services|technology|technologies|network|appliance|appliances|device|devices'
            cleaned=$(echo "$cleaned" | sed -E "s/\\b($GENERIC_NOUNS)\\b( |$)//I")
            cleaned=$(echo "$cleaned" | awk '{for(i=1;i<=NF && i<=6;i++) printf (i==1?$i:" "$i); print ""}')
            cleaned=$(echo "$cleaned" | sed -E 's/^ +| +$//g')
            [ -z "$cleaned" ] && cleaned="$first"
            echo "$cleaned"
          }

          safe_json_has_quotes() { jq -e '.quotes | length >= 1' <<<"$1" >/dev/null 2>&1; }
          safe_json_is_valid()   { jq -e . <<<"$1" >/dev/null 2>&1; }

          lookup_company_exchange() {
            local raw="$1"
            local key norm entry cached_ticker cached_exchange last_checked last_epoch age
            norm=$(norm_company_name "$raw"); key="$norm"
            local now_epoch; now_epoch=$(date -u +%s)

            # 1) Inventory with TTL for negative
            if jq -e --arg k "$key" 'has($k)' .cache/company_index.json >/dev/null; then
              entry=$(jq -r --arg k "$key" '.[$k]' .cache/company_index.json)
              cached_ticker=$(jq -r '.ticker' <<<"$entry")
              cached_exchange=$(jq -r '.exchange' <<<"$entry")
              last_checked=$(jq -r '.last_checked' <<<"$entry")
              last_epoch=$(date -u -d "$last_checked" +%s 2>/dev/null || echo 0)
              if [ "$cached_ticker" != "null" ] && [ -n "$cached_ticker" ]; then echo "$entry"; return 0; fi
              age=$(( now_epoch - last_epoch ))
              if [ "$last_epoch" -gt 0 ] && [ "$age" -lt "$NEG_TTL_SEC" ]; then echo "$entry"; return 0; fi
            fi

            # 2) Yahoo search with UA + retry/backoff, then fallback
            local q j ok symbol exchDisp; q=$(printf '%s' "$raw" | sed 's/ /%20/g')
            ok=false; symbol=""; exchDisp=""; j=""
            max_tries=3; sleep_s=1
            for try in $(seq 1 $max_tries); do
              j=$(curl -sL --max-time 8 -H "User-Agent: $YF_UA" -H "Accept-Language: $YF_LANG" \
                  "https://query1.finance.yahoo.com/v1/finance/search?q=$q&quotesCount=5&newsCount=0" || true)
              safe_json_is_valid "$j" || j=""
              if [ -n "$j" ] && safe_json_has_quotes "$j"; then break; fi
              sleep "$sleep_s"; sleep_s=$(( sleep_s * 2 ))
            done
            if [ -z "$j" ] || ! safe_json_has_quotes "$j"; then
              j=$(curl -sL --max-time 8 -H "User-Agent: $YF_UA" -H "Accept-Language: $YF_LANG" \
                  "https://query1.finance.yahoo.com/v1/finance/lookup?formatted=true&lang=en-US&region=US&query=$q&type=equity&count=5" || true)
              safe_json_is_valid "$j" || j=""
            fi

            if [ -n "$j" ]; then
              lines_json=$(jq -cr '.quotes[]? | select(.quoteType=="EQUITY") | {symbol:.symbol,exchDisp:.exchDisp} | @base64' <<<"$j" 2>/dev/null || true)
              while IFS= read -r b64; do
                [ -z "$b64" ] && continue
                line=$(echo "$b64" | base64 -d)
                symbol=$(jq -r '.symbol' <<<"$line")
                exchDisp=$(jq -r '.exchDisp' <<<"$line")
                if echo "$exchDisp" | grep -Ei '^(NASDAQ|NYSE|NYSE American|NYSE Arca)$' >/dev/null; then
                  ok=true; break
                fi
              done <<<"$lines_json"
            fi

            if [ "$ok" = true ]; then
              tmp=$(mktemp)
              jq --arg k "$key" --arg sym "$symbol" --arg exd "$exchDisp" --arg t "$(date -u +%FT%TZ)" \
                 '.[$k] = {ticker:$sym, exchange:$exd, last_checked:$t}' \
                 .cache/company_index.json > "$tmp" && mv "$tmp" .cache/company_index.json
              echo "{\"ticker\":\"$symbol\",\"exchange\":\"$exchDisp\"}"
            else
              tmp=$(mktemp)
              jq --arg k "$key" --arg t "$(date -u +%FT%TZ)" \
                 '.[$k] = {ticker:null, exchange:null, last_checked:$t}' \
                 .cache/company_index.json > "$tmp" && mv "$tmp" .cache/company_index.json
              echo '{"ticker":null,"exchange":null}'
            fi
          }

          # ---- Default sample headlines ----
          mapfile -t HEADLINES < <(cat <<'EOF'
Apple Inc. announces new services bundle for enterprise customers
AEWIN Launches SCB-1953 Series High-Performance Network Appliances Powered by Intel Xeon 6 Processors
Sungrow Inverters Successfully Pass the Brazilian Grid Operator Validations
NVIDIA and Oracle expand strategic collaboration to accelerate AI adoption
Novo Nordisk announces completion of share repurchase program
Taiwan Semiconductor Manufacturing Company to build advanced packaging facility in Japan
JPMorgan Chase reports third quarter results
MercadoLibre partners with company X to expand logistics in Brazil
DraftKings announces pricing of senior notes offering
Micron Technology unveils next-gen HBM4 memory
EOF
          )

          # ---- Optional extra headlines from workflow input (comma-separated) ----
          if [ -n "${EXTRA:-}" ]; then
            IFS=',' read -r -a EXTRA_ARR <<<"$EXTRA"
            for h in "${EXTRA_ARR[@]}"; do
              h_trim=$(echo "$h" | sed -E 's/^ +| +$//g')
              [ -n "$h_trim" ] && HEADLINES+=("$h_trim")
            done
          fi

          echo "🧪 Testing ${#HEADLINES[@]} headlines…"

          for H in "${HEADLINES[@]}"; do
            company_guess=$(extract_company_from_title "$H")
            info_json=$(lookup_company_exchange "$company_guess")
            exch=$(jq -r '.exchange // empty' <<<"$info_json")
            ticker=$(jq -r '.ticker // empty' <<<"$info_json")
            if echo "$exch" | grep -Ei '^(NASDAQ|NYSE|NYSE American|NYSE Arca)$' >/dev/null; then
              echo "✅ US listing: '$H'"
              echo "   → company:'$company_guess'  ticker:$ticker  exchange:$exch"
            else
              echo "⛔ Not US (or unresolved): '$H'"
              echo "   → company:'$company_guess'  ticker:${ticker:-null}  exchange:${exch:-null}"
            fi
          done

      - name: Inventory summary (counts + table)
        run: |
          if [ ! -f .cache/company_index.json ]; then
            echo "No inventory yet" >> "$GITHUB_STEP_SUMMARY"; exit 0;
          fi
          POS=$(jq '[ to_entries[] | select(.value.ticker != null and .value.exchange != null) ] | length' .cache/company_index.json)
          NEG=$(jq '[ to_entries[] | select(.value.ticker == null or .value.exchange == null) ] | length' .cache/company_index.json)
          {
            echo "### Company Inventory Summary (Test Harness)"
            echo ""
            echo "| Metric | Count |"
            echo "|---|---:|"
            echo "| Positives (ticker found) | $POS |"
            echo "| Negatives (no match) | $NEG |"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Publish inventory (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: company-index
          path: .cache/company_index.json

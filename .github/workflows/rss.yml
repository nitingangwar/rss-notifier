- name: Build symbol lookup (from symbols.csv via Python)
  shell: bash
  run: |
    set -euo pipefail
    INPUT_FILE="data/symbols.csv"   # update if your file lives elsewhere
    if [ ! -f "$INPUT_FILE" ]; then
      echo "‚ùå Missing $INPUT_FILE"; exit 1
    fi

    NEW_HASH="$(sha256sum "$INPUT_FILE" | awk '{print $1}')"
    OLD_HASH="$(cat .cache/symbols.sha256 || true)"

    if [ "$NEW_HASH" = "$OLD_HASH" ] && [ -s .cache/symbol_db.json ]; then
      echo "üü¢ symbols.csv unchanged; keys: $(jq 'keys|length' .cache/symbol_db.json)"
      exit 0
    fi

    echo "üîÑ Rebuilding lookup from symbols.csv using Python (auto-detect delimiter; 1..4 word prefixes)‚Ä¶"

    python3 - <<'PY' > .cache/symbol_db.json
import csv, json, sys, hashlib
from pathlib import Path

inp = Path("data/symbols.csv")
raw = inp.read_bytes()
# Robust: strip BOM if present
if raw.startswith(b'\xef\xbb\xbf'):
    raw = raw[3:]
text = raw.decode('utf-8', errors='replace')

# Auto-detect delimiter
sniffer = csv.Sniffer()
dialect = sniffer.sniff(text.splitlines()[0] if '\n' in text else text, delimiters='\t,;')
reader = csv.reader(text.splitlines(), dialect)

rows = list(reader)
if not rows:
    print(json.dumps({}))
    sys.exit(0)

# Find header (or assume first row is header if it looks like one)
header = rows[0]
lower = [h.strip().lower() for h in header]
has_header = ('symbol' in lower and ('name' in lower or 'company' in lower or 'company name' in lower))
start = 1 if has_header else 0

# Determine column indices
def idx_of(cands):
    for c in cands:
        if c in lower:
            return lower.index(c)
    return None

sym_idx = idx_of(['symbol', 'ticker', 'ticker symbol'])
name_idx = idx_of(['name', 'company', 'company name', 'security name'])

# If no header or columns not found, assume col0=symbol, col1=name
if sym_idx is None or name_idx is None:
    sym_idx, name_idx = 0, 1

db = {}
def norm_key(s: str) -> str:
    s = s.replace('\u00a0',' ').strip()
    s = ' '.join(s.split())
    return s.lower()

# Build 1..4 word prefix keys
for r in rows[start:]:
    if len(r) <= max(sym_idx, name_idx): 
        continue
    sym = r[sym_idx].strip()
    name = r[name_idx].strip()
    if not sym or not name:
        continue
    toks = [t for t in name.replace('\u00a0',' ').split() if t]
    for n in (1,2,3,4):
        if len(toks) < n: break
        pref = ' '.join(toks[:n])
        k = norm_key(pref)
        if k and k not in db:
            db[k] = {"ticker": sym}
        # +/& ‚Üí "and" variant
        kand = norm_key(k.replace('+',' and ').replace('&',' and '))
        if kand and kand not in db:
            db[kand] = {"ticker": sym}

print(json.dumps(db, ensure_ascii=False))
PY

    echo "$NEW_HASH" > .cache/symbols.sha256
    echo "‚úÖ Lookup built (keys: $(jq 'keys|length' .cache/symbol_db.json))"

    # Quick sanity: show a few keys
    jq -r 'to_entries | .[0:5] | .[] | "\(.key) => \(.value.ticker)"' .cache/symbol_db.json || true

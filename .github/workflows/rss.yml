name: Categorized RSS Alerts with Stock Recommendation

on:
  workflow_dispatch:  # Trigger manually via GitHub
  schedule:
    - cron: "*/5 * * * *"  # Trigger every 5 minutes (can adjust as needed)

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Set up the environment
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils w3m jq curl

      # Step 2: Download previous hashes (if any) from the previous run
      - name: Download previous hashes (if any)
        uses: actions/download-artifact@v4
        with:
          name: rss-cache
          path: .cache
        continue-on-error: true  # Continue if artifact is not found

      # Step 3: Check if the file exists before uploading
      - name: Verify the existence of the file
        run: |
          if [ -f .cache/sent_hashes.txt ]; then
            echo "File exists, proceeding with upload."
          else
            echo "File does not exist, skipping upload."
          fi

      # Step 4: Create cache file if not exists (for storing article hashes)
      - name: Create cache file if not exists
        run: |
          mkdir -p .cache
          touch .cache/sent_hashes.txt
          touch .cache/last_5min_articles.txt

      # Step 5: Parse RSS Feeds, perform sentiment analysis, and send to Slack
      - name: Parse RSS Feeds and Post to Slack
        run: |
          FEEDS=(
            "https://feed.businesswire.com/rss/home/?rss=G1QFDERJXkJeEFpRXEMGSQ5SVFJUGExaFEhaUlJDFUkQUhFUUFNdGEU="
            "https://www.globenewswire.com/rssfeed/exchange/Nasdaq,NYSE"
          )

          declare -A WEBHOOKS
          WEBHOOKS[general]="${{ secrets.SLACK_WEBHOOK_GENERAL }}"
          WEBHOOKS[medical]="${{ secrets.SLACK_WEBHOOK_MEDICAL }}"
          WEBHOOKS[contracts]="${{ secrets.SLACK_WEBHOOK_CONTRACTS }}"

          # Get the current time and calculate the cutoff time for the last 5 minutes
          CURRENT_TIME=$(date +%s)
          FIVE_MINUTES_AGO=$(($CURRENT_TIME - 300))  # Subtract 300 seconds (5 minutes)

          for FEED_URL in "${FEEDS[@]}"; do
            echo "🔍 Checking Feed: $FEED_URL"
            XML=$(curl -s "$FEED_URL")

            for i in 1 2 3; do
              LINK=$(echo "$XML" | xmllint --xpath "string((//item|//entry)[$i]/link | (//item|//entry)[$i]/link/@href)" - 2>/dev/null)
              TITLE=$(echo "$XML" | xmllint --xpath "string((//item|//entry)[$i]/title)" - 2>/dev/null)
              DESCRIPTION=$(echo "$XML" | xmllint --xpath "string((//item|//entry)[$i]/description | //entry[$i]/summary)" - 2>/dev/null)
              PUBDATE=$(echo "$XML" | xmllint --xpath "string((//item|//entry)[$i]/pubDate | //entry[$i]/updated)" - 2>/dev/null)

              [ -z "$LINK" ] && continue
              [ -z "$TITLE" ] && TITLE="(No Title)"
              [ -z "$DESCRIPTION" ] && DESCRIPTION="(No summary available)"
              [ -z "$PUBDATE" ] && PUBDATE="(No date provided)"

              DESCRIPTION=$(echo "$DESCRIPTION" | w3m -dump -T text/html | head -c 300)
              CONTENT="$TITLE $DESCRIPTION"
              CONTENT_LOWER=$(echo "$CONTENT" | tr '[:upper:]' '[:lower:]')

              # Get the timestamp of the article's pubDate and convert to Unix timestamp
              ARTICLE_TIME=$(date -d "$PUBDATE" +%s)
              if [ $ARTICLE_TIME -lt $FIVE_MINUTES_AGO ]; then
                echo "Skipping article: $TITLE (older than 5 minutes)"
                continue
              fi

              HEADLINE_HASH=$(echo "$TITLE" | md5sum | cut -d ' ' -f 1)
              if grep -q "$HEADLINE_HASH" .cache/last_5min_articles.txt; then
                echo "Skipping duplicate article: $TITLE"
                continue
              fi

              HEADLINE_HASH=$(echo "$TITLE" | md5sum | cut -d ' ' -f 1)
              echo "$HEADLINE_HASH" >> .cache/last_5min_articles.txt

              # 🔎 Sentiment Analysis (Using simple keyword matching)
              if echo "$CONTENT_LOWER" | grep -qE "positive topline|positive trial results|collaboration|funding"; then
                SENTIMENT="🟢 [POSITIVE]"
                RECOMMENDATION="BUY"
              elif echo "$CONTENT_LOWER" | grep -qE "contract awarded|acquisition|investment|deal|strategic partnership"; then
                SENTIMENT="🟢 [POSITIVE]"
                RECOMMENDATION="BUY"
              elif echo "$CONTENT_LOWER" | grep -qE "layoff|lawsuit|delay|loss|drop|decline|recall|fails|resigns|investigation"; then
                SENTIMENT="🔴 [NEGATIVE]"
                RECOMMENDATION="SELL"
              else
                SENTIMENT="⚪ [NEUTRAL]"
                RECOMMENDATION="HOLD"
              fi

              # 🧱 Format Slack message with real line breaks
              TEXT=$(printf ":bell: *New Article:*\n\n%s *%s*\n\n:page_facing_up: *Description:*\n%s\n\n:link: <%s|Read more>\n\n:clock3: *Posted:* %s\n\n:information_source: *Recommendation: %s\n───────────────" \
                "$SENTIMENT" "$TITLE" "$DESCRIPTION" "$LINK" "$PUBDATE" "$RECOMMENDATION")

              PAYLOAD=$(jq -n --arg text "$TEXT" \
                '{blocks: [ { type: "section", text: { type: "mrkdwn", text: $text } } ]}')

              echo "📤 Sending to Slack ($CATEGORY)..."
              curl -X POST "${WEBHOOKS[$CATEGORY]}" \
                -H 'Content-type: application/json' \
                --data "$PAYLOAD"
            done
          done

      # Step 6: Upload updated hashes
      - name: Upload updated hashes
        uses: actions/upload-artifact@v4
        with:
          name: rss-cache  # Ensure correct artifact name
          path: .cache/sent_hashes.txt  # Path to upload

name: Categorized RSS Alerts with Sentiment (Local TSV)

on:
  workflow_dispatch: {}
  # schedule:
  #   - cron: "*/10 * * * *"

concurrency:
  group: rss-alerts
  cancel-in-progress: false

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils w3m jq curl coreutils

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: .cache
          key: rss-cache-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            rss-cache-${{ runner.os }}-

      - name: Ensure cache files
        run: |
          mkdir -p .cache
          [ -f .cache/sent_hashes.txt ] || : > .cache/sent_hashes.txt
          [ -f .cache/last_10min_articles.txt ] || : > .cache/last_10min_articles.txt
          [ -f .cache/symbol_db.json ] || echo '{}' > .cache/symbol_db.json
          [ -f .cache/symbols.sha256 ]   || : > .cache/symbols.sha256

      # ======= Build (or reuse) a fast lookup from your TAB-separated file =======
      - name: Build symbol lookup (only if TSV changed)
        shell: bash
        run: |
          set -euo pipefail
          INPUT_FILE="data/symbols.csv"   # your TAB-separated file
          if [ ! -f "$INPUT_FILE" ]; then
            echo "‚ùå Missing $INPUT_FILE ‚Äî add it via GitHub UI (data/symbols.csv, tab-separated with header)."
            exit 1
          fi

          NEW_HASH="$(sha256sum "$INPUT_FILE" | awk '{print $1}')"
          OLD_HASH="$(cat .cache/symbols.sha256 || true)"

          if [ "$NEW_HASH" = "$OLD_HASH" ] && [ -s .cache/symbol_db.json ]; then
            echo "üü¢ symbols.csv unchanged; reusing existing lookup (keys: $(jq 'keys|length' .cache/symbol_db.json))"
            exit 0
          fi

          echo "üîÑ symbols.csv changed; rebuilding lookup‚Ä¶"
          KT=/tmp/key_ticker.tsv
          : > "$KT"

          norm() {
            # normalize a single string passed as $1
            local s="${1:-}"
            s="$(printf '%s' "$s" \
              | sed 's/[‚Ñ¢¬Æ¬©]//g' \
              | sed 's/[‚Äú‚Äù"()]//g' \
              | sed 's/&/ and /g' \
              | sed -E 's/\b(Inc|Incorporated|Corp|Corporation|Co|Company|Ltd|Limited|PLC|Group|Holdings?|LLC|LP|AG|S\.?A\.?)\b\.?,?//Ig' \
              | sed -E 's/[^0-9A-Za-z_. -]/ /g' \
              | tr '[:upper:]' '[:lower:]' \
              | sed -E 's/ +/ /g; s/^ +| +$//g')"
            printf '%s' "$s"
          }

          # Read TAB-separated rows: Symbol<TAB>Name<‚Ä¶>
          # Skip header (line 1). Only the first two columns are needed.
          tail -n +2 "$INPUT_FILE" | while IFS=$'\t' read -r sym name _; do
            [ -z "${sym:-}" ]  && continue
            [ -z "${name:-}" ] && continue

            # main key: full normalized name
            key="$(norm "$name")"
            [ -n "$key" ] && printf '%s\t%s\n' "$key" "$sym" >> "$KT"

            # alternates: first word, first two words
            # shellcheck disable=SC2206
            words=($name)
            w1="${words[0]:-}"; w2="${words[1]:-}"

            if [ -n "$w1" ]; then
              alt2="$(norm "$w1")"
              [ -n "$alt2" ] && printf '%s\t%s\n' "$alt2" "$sym" >> "$KT"
            fi
            if [ -n "$w1" ] && [ -n "$w2" ]; then
              alt1="$(norm "$w1 $w2")"
              [ -n "$alt1" ] && printf '%s\t%s\n' "$alt1" "$sym" >> "$KT"
            fi
          done

          # Single jq reduce (first occurrence wins)
          jq -Rs '
            split("\n")
            | map(select(length>0) | split("\t") | {k:.[0], t:.[1]})
            | reduce .[] as $r ({}; if has($r.k) then . else .[$r.k] = {ticker:$r.t} end)
          ' "$KT" > .cache/symbol_db.json

          echo "$NEW_HASH" > .cache/symbols.sha256
          echo "‚úÖ Lookup built (keys: $(jq 'keys|length' .cache/symbol_db.json))"

      # ======= Parse feeds and post to Slack (PRN filtered by local lookup) =======
      - name: Parse RSS Feeds ‚Üí Slack (PRN filtered by local US list)
        env:
          SLACK_WEBHOOK_GENERAL: ${{ secrets.SLACK_WEBHOOK_GENERAL }}
          SLACK_WEBHOOK_MEDICAL: ${{ secrets.SLACK_WEBHOOK_MEDICAL }}
          SLACK_WEBHOOK_CONTRACTS: ${{ secrets.SLACK_WEBHOOK_CONTRACTS }}
        shell: bash
        run: |
          set -euo pipefail

          # Helpers
          safe_xpath() { xmllint --xpath "string($2)" "$1" 2>/dev/null || true; }

          # Feeds
          FEEDS=(
            "https://feed.businesswire.com/rss/home/?rss=G1QFDERJXkJeEFpRXEMGSQ5SVFJUGExaFEhaUlJDFUkQUhFUUFNdGEU="
            "https://www.globenewswire.com/rssfeed/exchange/Nasdaq,NYSE"
            "https://www.prnewswire.com/rss/all-news-releases-from-PR-newswire-news.rss"
          )
          PRN_FEED="https://www.prnewswire.com/rss/all-news-releases-from-PR-newswire-news.rss"

          declare -A WEBHOOKS=(
            [general]="${SLACK_WEBHOOK_GENERAL}"
            [medical]="${SLACK_WEBHOOK_MEDICAL}"
            [contracts]="${SLACK_WEBHOOK_CONTRACTS}"
          )

          PER_FEED_ITEMS=3
          WINDOW_SEC=600
          CURRENT_TIME=$(date -u +%s)
          TEN_MINUTES_AGO=$((CURRENT_TIME - WINDOW_SEC))

          # prune rolling 10-min cache ("<epoch> <headline_hash>")
          awk -v cutoff="$TEN_MINUTES_AGO" '{
            if (NF >= 2) { epoch=$1; if (epoch ~ /^[0-9]+$/ && epoch >= cutoff) print $0; }
          }' .cache/last_10min_articles.txt > .cache/_pruned.tmp || true
          mv .cache/_pruned.tmp .cache/last_10min_articles.txt

          # normalization for query keys
          norm_company_name() {
            echo "$1" \
              | sed 's/[‚Ñ¢¬Æ¬©]//g' \
              | sed 's/[‚Äú‚Äù"'\''()]//g' \
              | sed 's/&/ and /g' \
              | sed -E 's/\b(Inc|Incorporated|Corp|Corporation|Co|Company|Ltd|Limited|PLC|Group|Holdings?|LLC|LP|AG|S\.?A\.?)\b\.?,?//Ig' \
              | sed -E 's/[^0-9A-Za-z_. -]/ /g' \
              | tr '[:upper:]' '[:lower:]' \
              | sed -E 's/ +/ /g; s/^ +| +$//g'
          }

          # get candidate company from headline (left chunk up to verb / separator)
          extract_candidates() {
            local title="$1"
            local pre; pre=$(echo "$title" | sed -E 's/ ‚Äî / - /g' | awk -F' - |:|\\|\\|' '{print $1}')
            [ -z "$pre" ] && pre="$title"
            pre=$(echo "$pre" | sed 's/[‚Äú‚Äù"()‚Ñ¢¬Æ¬©]//g' | tr -s ' ')
            local first; first=$(awk '{print $1}' <<<"$pre")
            if echo "$first" | grep -qE '^[A-Z0-9\-]{2,}$'; then echo "$first"; return 0; fi
            VERBS='announces|announce|launches|launch|reports|report|unveils|introduces|reveals|confirms|completes|signs|wins|awarded|enters|partners|acquires|files|prices|lists|successfully|passes|secures|appoints|names|extends|expands|approves|approved'
            awk -v verbs="$VERBS" 'function tolow(s){ out=s; gsub(/[[:punct:]]/,"",out); return tolower(out) }
              BEGIN{ split(verbs,v,"|"); for(i in v) V[v[i]]=1; }
              { n=NF; chunk="";
                for(i=1;i<=n;i++){
                  wl=tolow($i);
                  if (wl in V) break;
                  if ($i ~ /^[A-Z][A-Za-z0-9.-]*$/ || $i ~ /^[A-Z0-9-]{2,}$/){ chunk = (length(chunk)?chunk" ":"") $i }
                  else if (length(chunk)>0) break
                }
                print chunk }' <<<"$pre"
          }

          # lookup in prebuilt JSON map with progressive shortening
          resolve_company_local() {
            local raw="$1"
            local key=$(norm_company_name "$raw")
            local hit
            hit=$(jq -cr --arg k "$key" 'if has($k) then .[$k] else null end' .cache/symbol_db.json)
            if [ "$hit" != "null" ] && [ -n "$hit" ]; then echo "$hit"; return 0; fi
            # drop last token progressively
            local words=($key)
            while [ ${#words[@]} -gt 1 ]; do
              unset 'words[${#words[@]}-1]'
              local k2="${words[*]}"
              k2=$(echo "$k2" | sed -E 's/ +/ /g')
              hit=$(jq -cr --arg k "$k2" 'if has($k) then .[$k] else null end' .cache/symbol_db.json)
              if [ "$hit" != "null" ] && [ -n "$hit" ]; then echo "$hit"; return 0; fi
            done
            echo '{"ticker":null}'
          }

          NEW_ARTICLE_FOUND=false

          for FEED_URL in "${FEEDS[@]}"; do
            echo "üîç Checking Feed: $FEED_URL"
            XML_FILE=$(mktemp)
            curl -sL "$FEED_URL" > "$XML_FILE" || true
            if [ ! -s "$XML_FILE" ]; then
              echo "‚ö†Ô∏è Empty response."
              rm -f "$XML_FILE"
              continue
            fi

            for i in $(seq 1 "$PER_FEED_ITEMS"); do
              LINK=$(safe_xpath "$XML_FILE" "(//item|//entry)[$i]/link | (//item|//entry)[$i]/link/@href")
              TITLE=$(safe_xpath "$XML_FILE" "(//item|//entry)[$i]/title")
              DESCRIPTION=$(safe_xpath "$XML_FILE" "(//item|//entry)[$i]/description | //entry[$i]/summary")
              PUBDATE=$(safe_xpath "$XML_FILE" "(//item|//entry)[$i]/pubDate | //entry[$i]/updated")

              [ -z "$LINK" ] && continue
              [ -z "$TITLE" ] && TITLE="(No Title)"
              [ -z "$DESCRIPTION" ] && DESCRIPTION="(No summary available)"
              [ -z "$PUBDATE" ] && PUBDATE=""

              DESCRIPTION=$(echo "$DESCRIPTION" | w3m -dump -T text/html | tr -s '[:space:]' ' ' | sed 's/^ *//;s/ *$//' | head -c 300)
              CONTENT="$TITLE $DESCRIPTION"
              CONTENT_LOWER=$(echo "$CONTENT" | tr '[:upper:]' '[:lower:]')

              ARTICLE_TIME=$(date -d "$PUBDATE" +%s 2>/dev/null || echo 0)
              if [ "$ARTICLE_TIME" -eq 0 ] || [ "$ARTICLE_TIME" -lt "$TEN_MINUTES_AGO" ]; then
                echo "‚è±Ô∏è Skipping (invalid/old date): $TITLE"
                continue
              fi

              HEADLINE_HASH=$(echo -n "$TITLE" | md5sum | cut -d ' ' -f1)
              if grep -qx "$HEADLINE_HASH" <(awk '{print $2}' .cache/last_10min_articles.txt); then
                echo "üîÅ Skipping duplicate (10-min window): $TITLE"
                continue
              fi

              LINK_HASH=$(echo -n "$LINK" | md5sum | cut -d ' ' -f1)
              if grep -qx "$LINK_HASH" .cache/sent_hashes.txt; then
                echo "üß≠ Already sent (by link): $TITLE"
                continue
              fi
              if grep -qx "$HEADLINE_HASH" .cache/sent_hashes.txt; then
                echo "üß≠ Already sent (by headline): $TITLE"
                continue
              fi

              # PR Newswire: only send if company matches local list
              if [ "$FEED_URL" = "$PRN_FEED" ]; then
                cand=$(extract_candidates "$TITLE" | sed -E 's/^ +| +$//g' | head -n1)
                if [ -z "$cand" ]; then
                  echo "üá∫üá∏‚õî PRN skip (no company candidate): $TITLE"
                  continue
                fi
                info_json=$(resolve_company_local "$cand")
                ticker=$(jq -r '.ticker // empty' <<<"$info_json")
                if [ -z "$ticker" ]; then
                  echo "üá∫üá∏‚õî PRN skip (not in local US list): $TITLE (cand: $cand)"
                  continue
                fi
                echo "üá∫üá∏‚úÖ PRN US-listed: $TITLE (cand: $cand, $ticker)"
              fi

              # Category
              if echo "$CONTENT_LOWER" | grep -qE "positive topline|positive trial results|collaboration|funding"; then
                CATEGORY="medical"
              elif echo "$CONTENT_LOWER" | grep -qE "contract awarded|acquisition|investment|deal|strategic partnership"; then
                CATEGORY="contracts"
              else
                CATEGORY="general"
              fi

              # Sentiment
              if echo "$CONTENT_LOWER" | grep -qE "record|growth|surge|positive|expands|secured|approved|funding|investment|invests|acquire|acquired|launch|topline|announces|partnership"; then
                SENTIMENT=":large_green_circle: [POSITIVE]"
                RECOMMENDATION="BUY"
              elif echo "$CONTENT_LOWER" | grep -qE "layoff|lawsuit|delay|loss|drop|decline|recall|fails|resigns|investigation"; then
                SENTIMENT=":red_circle: [NEGATIVE]"
                RECOMMENDATION="SELL"
              else
                SENTIMENT=":white_circle: [NEUTRAL]"
                RECOMMENDATION="HOLD"
              fi

              PAYLOAD=$(jq -n \
                --arg title "$TITLE" \
                --arg desc "$DESCRIPTION" \
                --arg link "$LINK" \
                --arg sentiment "$SENTIMENT" \
                --arg pubdate "${PUBDATE:-Unknown}" \
                --arg rec "$RECOMMENDATION" \
                '{
                  blocks: [
                    { "type": "section", "text": { "type": "mrkdwn", "text": ":bell: *New Article*\n\($sentiment) *\($title)*" } },
                    { "type": "section", "text": { "type": "mrkdwn", "text": ":page_facing_up: \($desc)" } },
                    { "type": "context", "elements": [
                        { "type": "mrkdwn", "text": ":link: <\($link)|Read more>" },
                        { "type": "mrkdwn", "text": ":clock3: Posted: \($pubdate)" },
                        { "type": "mrkdwn", "text": ":mag: Suggestion: *\($rec)*" }
                      ]
                    }
                  ]
                }')

              echo "üì§ Sending to Slack ($CATEGORY)‚Ä¶"
              curl -s -X POST "${WEBHOOKS[$CATEGORY]}" \
                -H 'Content-type: application/json' \
                --data "$PAYLOAD" >/dev/null || true

              echo "$LINK_HASH" >> .cache/sent_hashes.txt
              echo "$HEADLINE_HASH" >> .cache/sent_hashes.txt
              echo "$CURRENT_TIME $HEADLINE_HASH" >> .cache/last_10min_articles.txt

              NEW_ARTICLE_FOUND=true
            done

            rm -f "$XML_FILE"
          done

          if [ "$NEW_ARTICLE_FOUND" = false ]; then
            echo "‚úÖ No new articles in the last 10 minutes."
          fi

      # ======= Manual headline test against your local list =======
      - name: Manual extractor + local list test
        shell: bash
        run: |
          set -euo pipefail
          echo "üß™ Testing headline ‚Üí company ‚Üí ticker‚Ä¶"

          norm_company_name() {
            echo "$1" \
              | sed 's/[‚Ñ¢¬Æ¬©]//g' \
              | sed 's/[‚Äú‚Äù"'\''()]//g' \
              | sed 's/&/ and /g' \
              | sed -E 's/\b(Inc|Incorporated|Corp|Corporation|Co|Company|Ltd|Limited|PLC|Group|Holdings?|LLC|LP|AG|S\.?A\.?)\b\.?,?//Ig' \
              | sed -E 's/[^0-9A-Za-z_. -]/ /g' \
              | tr '[:upper:]' '[:lower:]' \
              | sed -E 's/ +/ /g; s/^ +| +$//g'
          }

          extract_candidates() {
            local title="$1"
            local pre; pre=$(echo "$title" | sed -E 's/ ‚Äî / - /g' | awk -F' - |:|\\|\\|' '{print $1}')
            [ -z "$pre" ] && pre="$title"
            pre=$(echo "$pre" | sed 's/[‚Äú‚Äù"()‚Ñ¢¬Æ¬©]//g' | tr -s ' ')
            local first; first=$(awk '{print $1}' <<<"$pre")
            if echo "$first" | grep -qE '^[A-Z0-9\-]{2,}$'; then echo "$first"; return 0; fi
            VERBS='announces|announce|launches|launch|reports|report|unveils|introduces|reveals|confirms|completes|signs|wins|awarded|enters|partners|acquires|files|prices|lists|successfully|passes|secures|appoints|names|extends|expands|approves|approved'
            awk -v verbs="$VERBS" 'function tolow(s){ out=s; gsub(/[[:punct:]]/,"",out); return tolower(out) }
              BEGIN{ split(verbs,v,"|"); for(i in v) V[v[i]]=1; }
              { n=NF; chunk="";
                for(i=1;i<=n;i++){ wl=tolow($i); if (wl in V) break;
                  if ($i ~ /^[A-Z][A-Za-z0-9.-]*$/ || $i ~ /^[A-Z0-9-]{2,}$/){ chunk = (length(chunk)?chunk" ":"") $i }
                  else if (length(chunk)>0) break
                }
                print chunk }' <<<"$pre"
          }

          test_headlines=(
            "AEWIN Launches SCB-1953 Series High-Performance Network Appliances Powered by Intel Xeon 6 Processors"
            "Sungrow Inverters Successfully Pass the Brazilian Grid Operator Validations"
            "Apple Announces New AI-Powered iPhone Features"
            "Tesla Signs Strategic Partnership to Expand EV Charging Network"
            "Novartis Reports Positive Topline Results from Phase 3 Trial"
            "Infosys Partners with US Bank for Cloud Modernization"
            "Zoom Video Communications Unveils Next-Gen Collaboration Platform"
            "Pfizer and BioNTech Announce FDA Approval of Updated COVID-19 Vaccine"
          )

          for H in "${test_headlines[@]}"; do
            cand=$(extract_candidates "$H" | sed -E 's/^ +| +$//g' | head -n1)
            printf "üì∞ %s\n" "$H"
            printf "   ‚Üí Candidate: %s\n" "${cand:-<none>}"
            if [ -z "${cand:-}" ]; then
              echo "   ‚Üí ‚ùå no candidate"
              echo "---------------------------------"
              continue
            fi
            key=$(norm_company_name "$cand")
            hit=$(jq -cr --arg k "$key" 'if has($k) then .[$k] else null end' .cache/symbol_db.json)
            ticker=$(jq -r '.ticker // empty' <<<"$hit")
            if [ -n "$ticker" ]; then
              echo "   ‚Üí ‚úÖ $ticker (found in your local US list)"
            else
              echo "   ‚Üí ‚ùå not found in your local list"
            fi
            echo "---------------------------------"
          done

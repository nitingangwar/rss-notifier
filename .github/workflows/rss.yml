name: Categorized RSS Alerts with Sentiment

on:
  workflow_dispatch: {}
  # schedule:
  #   - cron: "*/10 * * * *"

concurrency:
  group: rss-alerts
  cancel-in-progress: false

jobs:
  notify:
    runs-on: ubuntu-latest

    steps:
      - name: Set up environment
        run: |
          sudo apt-get update
          sudo apt-get install -y libxml2-utils w3m jq curl coreutils gawk

      # Cross-run cache for dedupe + inventory + symbol DB
      - name: Restore cache
        uses: actions/cache@v4
        with:
          path: .cache
          key: rss-cache-${{ runner.os }}-${{ github.run_id }}
          restore-keys: |
            rss-cache-${{ runner.os }}-

      - name: Create cache files if not exists
        run: |
          mkdir -p .cache
          [ -f .cache/sent_hashes.txt ] || touch .cache/sent_hashes.txt
          [ -f .cache/last_10min_articles.txt ] || touch .cache/last_10min_articles.txt
          [ -f .cache/company_index.json ] || echo '{}' > .cache/company_index.json
          [ -f .cache/symbol_db.json ] || echo '{}' > .cache/symbol_db.json

      - name: Build/refresh US symbol database
        shell: bash
        run: |
          set -euo pipefail
          mkdir -p .cache
          today=$(date -u +%F)
          refresh=true
          if [ -s .cache/symbol_db.json ] && [ -f .cache/symbol_db.stamp ]; then
            last=$(cat .cache/symbol_db.stamp || true)
            [ "${last:-}" = "$today" ] && refresh=false
          fi
      
          if [ "$refresh" = false ]; then
            echo "🟢 Using cached symbol DB (entries: $(jq 'keys|length' .cache/symbol_db.json))"
            exit 0
          fi
      
          echo "🔄 Refreshing symbol DB…"
          : > /tmp/all_listed.tsv
      
          # ---------- 1) Try Nasdaq Trader (https → http, with retries) ----------
          fetch_ok=false
          for proto in https http; do
            for i in 1 2 3; do
              echo "… fetching ${proto}://ftp.nasdaqtrader.com/dynamic/SymDir/nasdaqtraded.txt (try $i)"
              if curl -fsSL --max-time 30 "${proto}://ftp.nasdaqtrader.com/dynamic/SymDir/nasdaqtraded.txt" -o /tmp/nasdaqtraded.txt; then
                echo "… fetching ${proto}://ftp.nasdaqtrader.com/dynamic/SymDir/otherlisted.txt (try $i)"
                if curl -fsSL --max-time 30 "${proto}://ftp.nasdaqtrader.com/dynamic/SymDir/otherlisted.txt" -o /tmp/otherlisted.txt; then
                  fetch_ok=true
                  break
                fi
              fi
              sleep $((i*2))
            done
            [ "$fetch_ok" = true ] && break
          done
      
          if [ "$fetch_ok" = true ]; then
            echo "✅ Nasdaq Trader fetched"
            # NASDAQ (pipe-delimited)
            awk -F'|' 'NR>1 && $0 !~ /File Creation Time/ && $0 !~ /^Symbol\|/ && $0!="" {
              sym=$1; name=$2;
              if (sym!="" && name!="") printf "%s\t%s\t%s\n", sym, name, "NASDAQ"
            }' /tmp/nasdaqtraded.txt >> /tmp/all_listed.tsv
      
            # OTHERLISTED (NYSE/Arca/Amex)
            awk -F'|' 'NR>1 && $0!="" {
              sym=$1; name=$2; ex=$3;
              exd=(ex=="N"?"NYSE":(ex=="A"?"NYSE American":(ex=="P"?"NYSE Arca":ex)));
              if (sym!="" && name!="" && exd!="") printf "%s\t%s\t%s\n", sym, name, exd
            }' /tmp/otherlisted.txt >> /tmp/all_listed.tsv
          else
            echo "⚠️ Nasdaq Trader unavailable from runner. Falling back to SEC."
      
            # ---------- 2) Try SEC company_tickers_exchange.json ----------
            UA='rss-alerts/1.0 (+https://github.com/your/repo; contact@example.com)'
            if curl -fsSL --max-time 45 -H "User-Agent: $UA" \
                 https://www.sec.gov/files/company_tickers_exchange.json -o /tmp/sec_exchange.json; then
              echo "✅ SEC exchange JSON fetched"
              if jq -e 'type=="array"' /tmp/sec_exchange.json >/dev/null 2>&1; then
                jq -r '.[] | select(.ticker and .title and .exchange)
                       | "\(.ticker)\t\(.title)\t\(.exchange)"' /tmp/sec_exchange.json >> /tmp/all_listed.tsv
              else
                jq -r 'to_entries[] | .value | select(.ticker and .title and .exchange)
                       | "\(.ticker)\t\(.title)\t\(.exchange)"' /tmp/sec_exchange.json >> /tmp/all_listed.tsv
              fi
            else
              echo "⚠️ SEC exchange file not reachable. Trying SEC basic tickers…"
              if curl -fsSL --max-time 45 -H "User-Agent: $UA" \
                   https://www.sec.gov/files/company_tickers.json -o /tmp/sec_basic.json; then
                echo "✅ SEC basic JSON fetched"
                if jq -e 'type=="array"' /tmp/sec_basic.json >/dev/null 2>&1; then
                  jq -r '.[] | select(.ticker and .title)
                         | "\(.ticker)\t\(.title)\t"' /tmp/sec_basic.json >> /tmp/all_listed.tsv
                else
                  jq -r 'to_entries[] | .value | select(.ticker and .title)
                         | "\(.ticker)\t\(.title)\t"' /tmp/sec_basic.json >> /tmp/all_listed.tsv
                fi
              fi
            fi
          fi
      
          # ---------- 3) Last resort seed (so job never hard-fails) ----------
          if [ ! -s /tmp/all_listed.tsv ]; then
            echo "⚠️ Using built-in seed list."
            {
              printf 'AAPL\tApple Inc.\tNASDAQ\n'
              printf 'TSLA\tTesla, Inc.\tNASDAQ\n'
              printf 'PFE\tPfizer Inc.\tNYSE\n'
              printf 'NVS\tNovartis AG\tNYSE\n'
              printf 'INFY\tInfosys Limited\tNYSE\n'
              printf 'ZM\tZoom Video Communications, Inc.\tNASDAQ\n'
              printf 'NVDA\tNVIDIA Corporation\tNASDAQ\n'
              printf 'MU\tMicron Technology, Inc.\tNASDAQ\n'
              printf 'JPM\tJPMorgan Chase & Co.\tNYSE\n'
            } > /tmp/all_listed.tsv
          fi
      
          echo "📄 Raw symbol rows: $(wc -l < /tmp/all_listed.tsv)"
      
          # ---------- Build symbol_db.json (Bash + jq) ----------
          norm() {
            echo "$1" \
              | sed 's/[™®©]//g' \
              | sed 's/[“”"()]//g' \
              | sed 's/&/ and /g' \
              | sed -E 's/\b(Inc|Incorporated|Corp|Corporation|Co|Company|Ltd|Limited|PLC|Group|Holdings?|LLC|LP|AG|S\.?A\.?)\b\.?,?//Ig' \
              | sed -E 's/[^A-Za-z0-9_.\- ]/ /g' \
              | tr '[:upper:]' '[:lower:]' \
              | sed -E 's/ +/ /g; s/^ +| +$//g'
          }
      
          map_exch() {
            case "$1" in
              NASDAQ|Nasdaq|NasdaqGS|NasdaqGM|NasdaqCM) echo "NASDAQ" ;;
              NYSE|New\ York\ Stock\ Exchange) echo "NYSE" ;;
              NYSE\ American|AMEX|Amex) echo "NYSE American" ;;
              NYSE\ Arca|Arca) echo "NYSE Arca" ;;
              "" ) echo "" ;;
              * ) echo "$1" ;;
            esac
          }
      
          JSONL=/tmp/sym_records.jsonl
          : > "$JSONL"
      
          while IFS=$'\t' read -r SYM NAME EXCH; do
            [ -z "${SYM:-}" ] && continue
            [ -z "${NAME:-}" ] && continue
            EXD=$(map_exch "${EXCH:-}")
            key=$(norm "$NAME")
            if [ -n "$key" ]; then
              printf '{"k":%s,"t":%s,"e":%s}\n' \
                "$(jq -Rs . <<<"$key")" \
                "$(jq -Rs . <<<"$SYM")" \
                "$(jq -Rs . <<<"$EXD")" >> "$JSONL"
            fi
            clean=$(echo "$NAME" | sed -E 's/[^A-Za-z0-9_.\- ]/ /g' | sed -E 's/ +/ /g')
            first_two=$(echo "$clean" | awk '{print $1" "$2}')
            alt1=$(norm "$first_two")
            if [ -n "$alt1" ]; then
              printf '{"k":%s,"t":%s,"e":%s}\n' \
                "$(jq -Rs . <<<"$alt1")" \
                "$(jq -Rs . <<<"$SYM")" \
                "$(jq -Rs . <<<"$EXD")" >> "$JSONL"
            fi
            first=$(echo "$clean" | awk '{print $1}')
            alt2=$(norm "$first")
            if [ -n "$alt2" ]; then
              printf '{"k":%s,"t":%s,"e":%s}\n' \
                "$(jq -Rs . <<<"$alt2")" \
                "$(jq -Rs . <<<"$SYM")" \
                "$(jq -Rs . <<<"$EXD")" >> "$JSONL"
            fi
          done < /tmp/all_listed.tsv
      
          jq -s 'reduce .[] as $r ({}; if has($r.k) then . else .[$r.k] = {ticker:$r.t, exchange:$r.e} end)' "$JSONL" \
            > .cache/symbol_db.json
      
          date -u +%F > .cache/symbol_db.stamp
          echo "✅ Symbol DB entries: $(jq 'keys|length' .cache/symbol_db.json)"


      - name: Parse RSS Feeds, filter PRN via local DB, and Post to Slack
        env:
          SLACK_WEBHOOK_GENERAL: ${{ secrets.SLACK_WEBHOOK_GENERAL }}
          SLACK_WEBHOOK_MEDICAL: ${{ secrets.SLACK_WEBHOOK_MEDICAL }}
          SLACK_WEBHOOK_CONTRACTS: ${{ secrets.SLACK_WEBHOOK_CONTRACTS }}
        run: |
          set -euo pipefail

          # ---------- Helpers ----------
          safe_xpath() { xmllint --xpath "string($2)" "$1" 2>/dev/null || true; }

          FEEDS=(
            "https://feed.businesswire.com/rss/home/?rss=G1QFDERJXkJeEFpRXEMGSQ5SVFJUGExaFEhaUlJDFUkQUhFUUFNdGEU="
            "https://www.globenewswire.com/rssfeed/exchange/Nasdaq,NYSE"
            "https://www.prnewswire.com/rss/all-news-releases-from-PR-newswire-news.rss"
          )
          PRN_FEED="https://www.prnewswire.com/rss/all-news-releases-from-PR-newswire-news.rss"

          declare -A WEBHOOKS=(
            [general]="${SLACK_WEBHOOK_GENERAL}"
            [medical]="${SLACK_WEBHOOK_MEDICAL}"
            [contracts]="${SLACK_WEBHOOK_CONTRACTS}"
          )

          PER_FEED_ITEMS=3
          WINDOW_SEC=600

          CURRENT_TIME=$(date -u +%s)
          TEN_MINUTES_AGO=$((CURRENT_TIME - WINDOW_SEC))

          # Prune rolling 10-min headline cache (format: "<epoch> <headline_hash>")
          awk -v cutoff="$TEN_MINUTES_AGO" '{
            if (NF >= 2) { epoch=$1; if (epoch ~ /^[0-9]+$/ && epoch >= cutoff) print $0; }
          }' .cache/last_10min_articles.txt > .cache/_pruned.tmp || true
          mv .cache/_pruned.tmp .cache/last_10min_articles.txt

          norm_company_name() {
            echo "$1" \
              | sed 's/[™®©]//g' \
              | sed 's/[“”"'\''()]//g' \
              | sed 's/&/ and /g' \
              | sed -E 's/\b(Inc|Incorporated|Corp|Corporation|Co|Company|Ltd|Limited|PLC|Group|Holdings?|LLC|LP|AG|S\.?A\.?)\b\.?,?//Ig' \
              | sed -E 's/ +/ /g; s/^ +| +$//g' \
              | tr '[:upper:]' '[:lower:]'
          }

          extract_candidates() {
            local title="$1"
            local pre; pre=$(echo "$title" | sed -E 's/ — / - /g' | awk -F' - |:|\\|\\|' '{print $1}')
            [ -z "$pre" ] && pre="$title"
            pre=$(echo "$pre" | sed 's/[“”"()™®©]//g' | tr -s ' ')
            local first; first=$(awk '{print $1}' <<<"$pre")
            if echo "$first" | grep -qE '^[A-Z0-9\-]{2,}$'; then echo "$first"; return 0; fi
            VERBS='announces|announce|launches|launch|reports|report|unveils|introduces|reveals|confirms|completes|signs|wins|awarded|enters|partners|acquires|files|prices|lists|successfully|passes|secures|appoints|names|extends|expands|approves|approved'
            awk -v verbs="$VERBS" 'function tolow(s){ out=s; gsub(/[[:punct:]]/,"",out); return tolower(out) }
              BEGIN{ split(verbs,v,"|"); for(i in v) V[v[i]]=1; }
              { n=NF; chunk="";
                for(i=1;i<=n;i++){ wl=tolow($i); if (wl in V) break; if ($i ~ /^[A-Z][A-Za-z0-9.-]*$/ || $i ~ /^[A-Z0-9-]{2,}$/){ chunk = (length(chunk)?chunk" ":"") $i } else if (length(chunk)>0) break }
                print chunk }' <<<"$pre"
          }

          resolve_company_local() {
            # returns JSON {"ticker": "...", "exchange": "..."} or {"ticker":null}
            local raw="$1"
            local key=$(norm_company_name "$raw")
            local hit
            hit=$(jq -cr --arg k "$key" 'if has($k) then .[$k] else null end' .cache/symbol_db.json)
            if [ "$hit" != "null" ] && [ -n "$hit" ]; then
              echo "$hit"; return 0
            fi
            # Try progressive shortening (drop last token)
            local words=($key)
            while [ ${#words[@]} -gt 1 ]; do
              unset 'words[${#words[@]}-1]'
              k2="${words[*]}"
              k2=$(echo "$k2" | sed -E 's/ +/ /g')
              hit=$(jq -cr --arg k "$k2" 'if has($k) then .[$k] else null end' .cache/symbol_db.json)
              if [ "$hit" != "null" ] && [ -n "$hit" ]; then
                echo "$hit"; return 0
              fi
            done
            echo '{"ticker":null,"exchange":null}'
          }

          # ---------- MAIN LOOP ----------
          NEW_ARTICLE_FOUND=false

          for FEED_URL in "${FEEDS[@]}"; do
            echo "🔍 Checking Feed: $FEED_URL"

            XML_FILE=$(mktemp)
            curl -sL "$FEED_URL" > "$XML_FILE" || true
            if [ ! -s "$XML_FILE" ]; then
              echo "⚠️  Empty response from feed."
              rm -f "$XML_FILE"
              continue
            fi

            for i in $(seq 1 "$PER_FEED_ITEMS"); do
              LINK=$(safe_xpath "$XML_FILE" "(//item|//entry)[$i]/link | (//item|//entry)[$i]/link/@href")
              TITLE=$(safe_xpath "$XML_FILE" "(//item|//entry)[$i]/title")
              DESCRIPTION=$(safe_xpath "$XML_FILE" "(//item|//entry)[$i]/description | //entry[$i]/summary")
              PUBDATE=$(safe_xpath "$XML_FILE" "(//item|//entry)[$i]/pubDate | //entry[$i]/updated")

              [ -z "$LINK" ] && continue
              [ -z "$TITLE" ] && TITLE="(No Title)"
              [ -z "$DESCRIPTION" ] && DESCRIPTION="(No summary available)"
              [ -z "$PUBDATE" ] && PUBDATE=""

              DESCRIPTION=$(echo "$DESCRIPTION" | w3m -dump -T text/html | tr -s '[:space:]' ' ' | sed 's/^ *//;s/ *$//' | head -c 300)
              CONTENT="$TITLE $DESCRIPTION"
              CONTENT_LOWER=$(echo "$CONTENT" | tr '[:upper:]' '[:lower:]')

              ARTICLE_TIME=$(date -d "$PUBDATE" +%s 2>/dev/null || echo 0)
              if [ "$ARTICLE_TIME" -eq 0 ] || [ "$ARTICLE_TIME" -lt "$TEN_MINUTES_AGO" ]; then
                echo "⏱️ Skipping (invalid/old date): $TITLE"
                continue
              fi

              HEADLINE_HASH=$(echo -n "$TITLE" | md5sum | cut -d ' ' -f1)
              if grep -qx "$HEADLINE_HASH" <(awk '{print $2}' .cache/last_10min_articles.txt); then
                echo "🔁 Skipping duplicate headline (10-min window): $TITLE"
                continue
              fi

              LINK_HASH=$(echo -n "$LINK" | md5sum | cut -d ' ' -f1)
              if grep -qx "$LINK_HASH" .cache/sent_hashes.txt; then
                echo "🧭 Already sent (by link): $TITLE"
                continue
              fi
              if grep -qx "$HEADLINE_HASH" .cache/sent_hashes.txt; then
                echo "🧭 Already sent (by headline): $TITLE"
                continue
              fi

              # --- US-listing filter for PR Newswire ONLY (local DB) ---
              if [ "$FEED_URL" = "$PRN_FEED" ]; then
                cand=$(extract_candidates "$TITLE" | sed -E 's/^ +| +$//g' | head -n1)
                if [ -z "$cand" ]; then
                  echo "🇺🇸⛔ Skipping PRN (no company candidate): $TITLE"
                  continue
                fi
                info_json=$(resolve_company_local "$cand")
                exch=$(jq -r '.exchange // empty' <<<"$info_json")
                ticker=$(jq -r '.ticker // empty' <<<"$info_json")
                if ! echo "$exch" | grep -Ei '^(NASDAQ|NYSE|NYSE American|NYSE Arca)$' >/dev/null; then
                  echo "🇺🇸⛔ Skipping PRN (not US-listed or unresolved): $TITLE (cand: $cand)"
                  continue
                fi
                echo "🇺🇸✅ PRN US-listed: $TITLE (cand: $cand, $ticker / $exch)"
              fi

              # Categorize
              if echo "$CONTENT_LOWER" | grep -qE "positive topline|positive trial results|collaboration|funding"; then
                CATEGORY="medical"
              elif echo "$CONTENT_LOWER" | grep -qE "contract awarded|acquisition|investment|deal|strategic partnership"; then
                CATEGORY="contracts"
              else
                CATEGORY="general"
              fi

              # Sentiment + naive recommendation
              if echo "$CONTENT_LOWER" | grep -qE "record|growth|surge|positive|expands|secured|approved|funding|investment|invests|acquire|acquired|launch|topline|announces|partnership"; then
                SENTIMENT=":large_green_circle: [POSITIVE]"
                RECOMMENDATION="BUY"
              elif echo "$CONTENT_LOWER" | grep -qE "layoff|lawsuit|delay|loss|drop|decline|recall|fails|resigns|investigation"; then
                SENTIMENT=":red_circle: [NEGATIVE]"
                RECOMMENDATION="SELL"
              else
                SENTIMENT=":white_circle: [NEUTRAL]"
                RECOMMENDATION="HOLD"
              fi

              PAYLOAD=$(jq -n \
                --arg title "$TITLE" \
                --arg desc "$DESCRIPTION" \
                --arg link "$LINK" \
                --arg sentiment "$SENTIMENT" \
                --arg pubdate "${PUBDATE:-Unknown}" \
                --arg rec "$RECOMMENDATION" \
                '{
                  blocks: [
                    { "type": "section", "text": { "type": "mrkdwn", "text": ":bell: *New Article*\n\($sentiment) *\($title)*" } },
                    { "type": "section", "text": { "type": "mrkdwn", "text": ":page_facing_up: \($desc)" } },
                    { "type": "context", "elements": [
                        { "type": "mrkdwn", "text": ":link: <\($link)|Read more>" },
                        { "type": "mrkdwn", "text": ":clock3: Posted: \($pubdate)" },
                        { "type": "mrkdwn", "text": ":mag: Suggestion: *\($rec)*" }
                      ]
                    }
                  ]
                }')

              echo "📤 Sending to Slack ($CATEGORY)…"
              curl -s -X POST "${WEBHOOKS[$CATEGORY]}" \
                -H 'Content-type: application/json' \
                --data "$PAYLOAD" >/dev/null || true

              echo "$LINK_HASH" >> .cache/sent_hashes.txt
              echo "$HEADLINE_HASH" >> .cache/sent_hashes.txt
              echo "$CURRENT_TIME $HEADLINE_HASH" >> .cache/last_10min_articles.txt

              NEW_ARTICLE_FOUND=true
            done

            rm -f "$XML_FILE"
          done

          if [ "$NEW_ARTICLE_FOUND" = false ]; then
            echo "✅ No new articles in the last 10 minutes."
          fi

      # ===== Manual PRN-style headline test against local symbol DB =====
      - name: Manual headline extractor + local DB lookup test
        run: |
          set -euo pipefail

          norm_company_name() {
            echo "$1" \
              | sed 's/[™®©]//g' \
              | sed 's/[“”"'\''()]//g' \
              | sed 's/&/ and /g' \
              | sed -E 's/\b(Inc|Incorporated|Corp|Corporation|Co|Company|Ltd|Limited|PLC|Group|Holdings?|LLC|LP|AG|S\.?A\.?)\b\.?,?//Ig' \
              | sed -E 's/ +/ /g; s/^ +| +$//g' \
              | tr '[:upper:]' '[:lower:]'
          }

          extract_candidates() {
            local title="$1"
            local pre; pre=$(echo "$title" | sed -E 's/ — / - /g' | awk -F' - |:|\\|\\|' '{print $1}')
            [ -z "$pre" ] && pre="$title"
            pre=$(echo "$pre" | sed 's/[“”"()™®©]//g' | tr -s ' ')
            local first; first=$(awk '{print $1}' <<<"$pre")
            if echo "$first" | grep -qE '^[A-Z0-9\-]{2,}$'; then echo "$first"; return 0; fi
            VERBS='announces|announce|launches|launch|reports|report|unveils|introduces|reveals|confirms|completes|signs|wins|awarded|enters|partners|acquires|files|prices|lists|successfully|passes|secures|appoints|names|extends|expands|approves|approved'
            awk -v verbs="$VERBS" 'function tolow(s){ out=s; gsub(/[[:punct:]]/,"",out); return tolower(out) }
              BEGIN{ split(verbs,v,"|"); for(i in v) V[v[i]]=1; }
              { n=NF; chunk="";
                for(i=1;i<=n;i++){ wl=tolow($i); if (wl in V) break; if ($i ~ /^[A-Z][A-Za-z0-9.-]*$/ || $i ~ /^[A-Z0-9-]{2,}$/){ chunk = (length(chunk)?chunk" ":"") $i } else if (length(chunk)>0) break }
                print chunk }' <<<"$pre"
          }

          resolve_company_local() {
            local raw="$1"
            local key=$(norm_company_name "$raw")
            local hit
            hit=$(jq -cr --arg k "$key" 'if has($k) then .[$k] else null end' .cache/symbol_db.json)
            if [ "$hit" != "null" ] && [ -n "$hit" ]; then echo "$hit"; return 0; fi
            local words=($key)
            while [ ${#words[@]} -gt 1 ]; do
              unset 'words[${#words[@]}-1]'
              k2="${words[*]}"; k2=$(echo "$k2" | sed -E 's/ +/ /g')
              hit=$(jq -cr --arg k "$k2" 'if has($k) then .[$k] else null end' .cache/symbol_db.json)
              if [ "$hit" != "null" ] && [ -n "$hit" ]; then echo "$hit"; return 0; fi
            done
            echo '{"ticker":null,"exchange":null}'
          }

          echo "📰 Testing extractor + local DB…"
          HEADLINES=(
            "AEWIN Launches SCB-1953 Series High-Performance Network Appliances Powered by Intel Xeon 6 Processors"
            "Sungrow Inverters Successfully Pass the Brazilian Grid Operator Validations"
            "Apple Announces New AI-Powered iPhone Features"
            "Tesla Signs Strategic Partnership to Expand EV Charging Network"
            "Novartis Reports Positive Topline Results from Phase 3 Trial"
            "Infosys Partners with US Bank for Cloud Modernization"
            "Zoom Video Communications Unveils Next-Gen Collaboration Platform"
            "Pfizer and BioNTech Announce FDA Approval of Updated COVID-19 Vaccine"
          )

          for H in "${HEADLINES[@]}"; do
            cand=$(extract_candidates "$H" | sed -E 's/^ +| +$//g' | head -n1)
            echo "📰 $H"
            echo "   → Candidate: ${cand:-<none>}"
            if [ -z "${cand:-}" ]; then echo "   → ❌ no candidate"; echo "---------------------------------"; continue; fi
            info_json=$(resolve_company_local "$cand")
            exch=$(jq -r '.exchange // empty' <<<"$info_json")
            ticker=$(jq -r '.ticker // empty' <<<"$info_json")
            if [ -n "$ticker" ] && echo "$exch" | grep -Ei '^(NASDAQ|NYSE|NYSE American|NYSE Arca)$' >/dev/null; then
              echo "   → ✅ $ticker / $exch"
            else
              echo "   → ❌ not US-listed or unresolved"
            fi
            echo "---------------------------------"
          done

      # ===== Inventory inspection & publishing =====
      - name: Inspect company inventory (summary)
        run: |
          if [ ! -f .cache/company_index.json ]; then
            echo "No inventory file yet."; exit 0;
          fi
          echo "📦 company_index.json"
          ls -lh .cache/company_index.json
          echo "Total entries:"
          jq 'keys | length' .cache/company_index.json
          echo "Sample (first 10 positives):"
          jq -r '[ to_entries[] | select(.value.ticker != null) ][0:10]' .cache/company_index.json

      - name: Inventory summary (Job Summary)
        run: |
          if [ ! -f .cache/company_index.json ]; then
            echo "No inventory yet" >> "$GITHUB_STEP_SUMMARY"; exit 0;
          fi
          POS=$(jq '[ to_entries[] | select(.value.ticker != null and .value.exchange != null) ] | length' .cache/company_index.json)
          NEG=$(jq '[ to_entries[] | select(.value.ticker == null or .value.exchange == null) ] | length' .cache/company_index.json)
          {
            echo "### Company Inventory Summary"
            echo ""
            echo "| Metric | Count |"
            echo "|---|---:|"
            echo "| Positives (ticker found) | $POS |"
            echo "| Negatives (no match) | $NEG |"
          } >> "$GITHUB_STEP_SUMMARY"

      - name: Publish company inventory (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: company-index
          path: .cache/company_index.json
